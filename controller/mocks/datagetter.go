// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Diegoplas/2022Q2GO-Bootcamp/controller (interfaces: DataGetter)

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	http "net/http"
	reflect "reflect"

	model "github.com/Diegoplas/2022Q2GO-Bootcamp/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDataGetter is a mock of DataGetter interface.
type MockDataGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDataGetterMockRecorder
}

// MockDataGetterMockRecorder is the mock recorder for MockDataGetter.
type MockDataGetterMockRecorder struct {
	mock *MockDataGetter
}

// NewMockDataGetter creates a new mock instance.
func NewMockDataGetter(ctrl *gomock.Controller) *MockDataGetter {
	mock := &MockDataGetter{ctrl: ctrl}
	mock.recorder = &MockDataGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataGetter) EXPECT() *MockDataGetterMockRecorder {
	return m.recorder
}

// CopyResponseToCSVFile mocks base method.
func (m *MockDataGetter) CopyResponseToCSVFile(arg0 *http.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyResponseToCSVFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyResponseToCSVFile indicates an expected call of CopyResponseToCSVFile.
func (mr *MockDataGetterMockRecorder) CopyResponseToCSVFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyResponseToCSVFile", reflect.TypeOf((*MockDataGetter)(nil).CopyResponseToCSVFile), arg0)
}

// CreateCSVFile mocks base method.
func (m *MockDataGetter) CreateCSVFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCSVFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCSVFile indicates an expected call of CreateCSVFile.
func (mr *MockDataGetterMockRecorder) CreateCSVFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCSVFile", reflect.TypeOf((*MockDataGetter)(nil).CreateCSVFile))
}

// ExtractRowsFromCSVFile mocks base method.
func (m *MockDataGetter) ExtractRowsFromCSVFile(arg0 string) ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractRowsFromCSVFile", arg0)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractRowsFromCSVFile indicates an expected call of ExtractRowsFromCSVFile.
func (mr *MockDataGetterMockRecorder) ExtractRowsFromCSVFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractRowsFromCSVFile", reflect.TypeOf((*MockDataGetter)(nil).ExtractRowsFromCSVFile), arg0)
}

// GetDataFromHistoricalValueRows mocks base method.
func (m *MockDataGetter) GetDataFromHistoricalValueRows(arg0 int, arg1 [][]string) (model.CryptoRecordValues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataFromHistoricalValueRows", arg0, arg1)
	ret0, _ := ret[0].(model.CryptoRecordValues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFromHistoricalValueRows indicates an expected call of GetDataFromHistoricalValueRows.
func (mr *MockDataGetterMockRecorder) GetDataFromHistoricalValueRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataFromHistoricalValueRows", reflect.TypeOf((*MockDataGetter)(nil).GetDataFromHistoricalValueRows), arg0, arg1)
}
